/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
#include<stdio.h>
#include<stdlib.h>
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){
    struct ListNode *new_node = malloc(sizeof(struct ListNode));
    struct ListNode *head = new_node;
    struct ListNode *tail = new_node;
    // anslist = NULL;
    while(list1 != NULL && list2 != NULL)
    {
        if(list1->val == list2->val)
        {
            struct ListNode *new_node1 = malloc(sizeof(struct ListNode));
            struct ListNode *new_node2 = malloc(sizeof(struct ListNode));
            new_node1->val = list1->val;
            new_node2->val = list2->val;
            tail->next = new_node1;
            tail->next->next = new_node2;
            tail = new_node2;
            list1 = list1->next;
            list2 = list2->next;
        }
        else if(list1->val < list2->val)
        {
            struct ListNode *new_node1 = malloc(sizeof(struct ListNode));
            new_node1->val = list1->val;
            tail->next = new_node1;
            tail = new_node1;
            list1 = list1->next;
        }
        else
        {
            struct ListNode *new_node2 = malloc(sizeof(struct ListNode));
            new_node2->val = list2->val;
            tail->next = new_node2;
            tail = new_node2;
            list2 = list2->next;
        }
    }

    while(list1 != NULL)
    {
        struct ListNode *new_node1 = malloc(sizeof(struct ListNode));
            new_node1->val = list1->val;
            tail->next = new_node1;
            tail = new_node1;
            list1 = list1->next;
    }
    while(list2 != NULL)
    {
        struct ListNode *new_node2 = malloc(sizeof(struct ListNode));
            new_node2->val = list2->val;
            tail->next = new_node2;
            tail = new_node2;
            list2 = list2->next;
    }
    head = head->next;
    return head;
}