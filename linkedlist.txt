new=(struct node*)malloc(sizeof(struct node))
scaf("%d",&value)
new->data=value;
new->next=null;

if(head==null)
{
    head=new;
    tail=new;
}
else
{
    tail->next=new;
    tail=new;
}
//display



temp=head;
while(temp!=null)

{
    printf("%d",temp->data);
    temp=temp->next;
}





//hacktherack


solve print the value


void printLinkedList(SinglyLinkedListNode* head) {
   SinglyLinkedListNode* jtr=head;
    while(jtr!=NULL)
    {
        printf("%d\n",jtr->data);
        jtr=jtr->next;
    }


}

solve insert the valuw
SinglyLinkedListNode* insertNodeAtTail(SinglyLinkedListNode* head, int data) {

SinglyLinkedListNode* temp = head;
         SinglyLinkedListNode * t = (SinglyLinkedList*)malloc(sizeof(SinglyLinkedList));
         
         t->data = data;
         t->next = NULL;
    if(head == NULL){
        head = t;
        return head;
    }
         while(temp->next != NULL){
             temp = temp->next;
         }
        temp->next = t;
     return head;

}


insert linked printLinkedList

scaf("%d",&value);
new->data=value;
new->next=head;
head=new;




insert at end





scaf("%d",&value);
new->data=value;
tail->next=new;
new->next=null;
tail=new;


insertion at middle


scanf("%d",&value);
scaf("%d",&pos);
for(i=0;i<pos-1;i++)
temp=temp->next;
new->data=value;
new->next=temp->next;
temp->next=new;




deletion at end

temp=head;
while(temp->next!=tail)
{
    temp=temp->next;
}
temp->next=null;
tail=temp;


deletion at mddle

scaf("%d",&pos)
temp=head;
for(i=0;i<pos-1;i++)
temp=temp->next;
temp->next=temp->next->next
